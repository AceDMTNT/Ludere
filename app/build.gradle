apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

ext.rom = new Properties()
file("${rootProject.projectDir}/config/rom.properties").withInputStream { ext.rom.load(it) }

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.draco.libretrowrapper.${rom.id}"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        manifestPlaceholders = [orientation:rom.orientation]
    }

    buildTypes {
        all {
            resValue("string", "rom_name", rom.name)

            resValue("string", "rom_core", rom.core)

            resValue("color", "rom_foreground_color", rom.foregroundColor)
            resValue("color", "rom_background_color", rom.backgroundColor)

            resValue("string", "rom_variables", rom.variables)

            resValue("bool", "rom_gamepad_visible", rom.gamePadVisible)

            resValue("color", "rom_gamepad_icon_color", rom.gamePadIconColor)
            resValue("color", "rom_gamepad_button_color", rom.gamePadButtonColor)
            resValue("color", "rom_gamepad_pressed_color", rom.gamePadPressedColor)

            resValue("dimen", "rom_gamepad_height_portrait", rom.gamePadHeightPortrait)
            resValue("dimen", "rom_gamepad_width_landscape", rom.gamePadWidhtLandscape)

            resValue("dimen", "rom_gamepad_spacing_vertical_portrait", rom.gamePadSpacingVerticalPortrait)
            resValue("dimen", "rom_gamepad_spacing_horizontal_portrait", rom.gamePadSpacingHorizontalPortrait)
            resValue("dimen", "rom_gamepad_spacing_vertical_landscape", rom.gamePadSpacingVerticalLandscape)
            resValue("dimen", "rom_gamepad_spacing_horizontal_landscape", rom.gamePadSpacingHorizontalLandscape)

            resValue("bool", "rom_gamepad_a", rom.gamePadA)
            resValue("bool", "rom_gamepad_b", rom.gamePadB)
            resValue("bool", "rom_gamepad_x", rom.gamePadX)
            resValue("bool", "rom_gamepad_y", rom.gamePadY)
            resValue("bool", "rom_gamepad_start", rom.gamePadStart)
            resValue("bool", "rom_gamepad_select", rom.gamePadSelect)
            resValue("bool", "rom_gamepad_l1", rom.gamePadL1)
            resValue("bool", "rom_gamepad_l2", rom.gamePadL2)
            resValue("bool", "rom_gamepad_r1", rom.gamePadR1)
            resValue("bool", "rom_gamepad_r2", rom.gamePadR2)
            resValue("bool", "rom_gamepad_analog_left", rom.gamePadAnalogLeft)
            resValue("bool", "rom_gamepad_analog_right", rom.gamePadAnalogRight)
            resValue("bool", "rom_gamepad_save_state", rom.gamePadSaveState)
            resValue("bool", "rom_gamepad_load_state", rom.gamePadLoadState)
            resValue("bool", "rom_gamepad_fast_forward", rom.gamePadFastForward)
            resValue("bool", "rom_gamepad_mute", rom.gamePadMute)
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    preBuild.dependsOn 'cleanAssets'
    preBuild.dependsOn 'copyAssets'
}

task cleanAssets(type: Delete) {
    delete file('src/main/assets/').listFiles()
}

task copyAssets(type: Copy) {
    if (!rom.romPath.isEmpty()) {
        from "${rootProject.projectDir}/config/${rom.romPath}"
        into "src/main/assets/"
        rename("${rom.romPath}", "rom")
    }

    if (!rom.corePath.isEmpty()) {
        from "${rootProject.projectDir}/config/${rom.corePath}"
        into "src/main/assets/"
        rename("${rom.corePath}", "core")
    }

    if (!rom.savePath.isEmpty()) {
        from "${rootProject.projectDir}/config/${rom.savePath}"
        into "src/main/assets/"
        rename("${rom.savePath}", "save")
    }

    if (!rom.statePath.isEmpty()) {
        from "${rootProject.projectDir}/config/${rom.statePath}"
        into "src/main/assets/"
        rename("${rom.statePath}", "state")
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.github.swordfish90:radialgamepad:0.1.0'
    implementation 'com.github.swordfish90:libretrodroid:0.4.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
}