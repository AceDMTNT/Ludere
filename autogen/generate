#!/usr/bin/env bash

# Script path constants
SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_ROOT="$(dirname "$SCRIPT_PATH")"
PROJECT_ROOT="$SCRIPT_ROOT/.."

# Important project paths
RES_DIR="$PROJECT_ROOT/app/src/main/res"
RAW_DIR="$RES_DIR/raw"
INPUT_DIR="$SCRIPT_ROOT/input"
OUTPUT_DIR="$SCRIPT_ROOT/output"
APK_OUTPUT_DIR="$PROJECT_ROOT/app/build/outputs/apk/release"
AAB_OUTPUT_DIR="$PROJECT_ROOT/app/build/outputs/bundle/release"

# Paths to mutable files
CONFIG="$RES_DIR/values/config.xml"
ROM="$RAW_DIR/rom"

# Supported ABIs
ABIS=(armeabi-v7a arm64-v8a x86 x86_64 universal)

# Log a message
log() {
	echo -e "\e[36m > $*\e[0m"
}

# Log a non-fatal error
err() {
	echo -e "\e[31m > $*\e[0m"
}

# Run gradle commands from proper directory
gradlew() {
	cd "$PROJECT_ROOT" || return
	bash gradlew "$@"
}

# Get a value from the config file given a name
config_val() {
	local name="$1"

	grep "name=\"$1\"" "$CONFIG" | grep -o -P '(?<=>).*(?=</)'
}

# Replace a value in the config file given a name and a new value
config_replace() {
	local name="$1"
	local value="$2"

	# Fix some sed expansions
	value="${value//&/\\&}"
	value="${value//|/\\|}"

	sed -i "s|name=\"$name\">.*</|name=\"$name\">$value</|" "$CONFIG"
}

# Make sure necessary folders are here
prepare_env() {
	local abi

	# Create raw directory if missing
	[[ ! -d "$RAW_DIR" ]] && mkdir -p "$RAW_DIR"

	# Create output ABI folders
	for abi in "${ABIS[@]}" aab
	do
		mkdir -p "$OUTPUT_DIR/$abi"
	done
}

# Build one package
compile() {
	gradlew assembleRelease
	gradlew bundleRelease
}

build_inputs() {
	local subdir
	local rom
	local filename
	local romname
	local romid
	local output_filename

	for subdir in "$INPUT_DIR"/*
	do
		# Skip invalid directories
		[[ ! -f "$subdir/config.xml" ]] && continue

		# Clean existing cores
		gradlew clean

		for rom in "$subdir"/*
		do
			filename="$(basename -- "$rom")"

			# Skip config file; not a ROM
			[[ "$filename" == "config.xml" ]] && continue

			# Remove extension
			romname="${filename%.*}"

			# Replace spaces with underscores
			romid="${romname// /_}"

			# Everything that is just letters and numbers
			romid="${romname//[^A-Za-z0-9_]/}"

			# To lowercase
			romid="${romid,,}"

			# Escape special characters
			romname="${romname//&/&amp;}"
			romname="${romname//@/\\@}"
			romname="${romname//\?/\\\?}"
			romname="${romname//\t/\\\t}"
			romname="${romname//\'/\\\'}"
			romname="${romname//\"/\\\"}"

			# Assert valid romid
			if [[ ! "$romid" =~ ^[a-z] ]]
			then
				err "$romid must start with a letter! Skipping..."
				continue
			fi

			# Update config with this info
			cp "$subdir/config.xml" "$CONFIG"
			config_replace "config_id" "$romid"
			config_replace "config_name" "$romname"
			core="$(config_val "config_core")"

			# File name of output excluding extension
			output_filename="${core}_${romid}"

			# Skip build if already built
			[[ -f "$OUTPUT_DIR/aab/$output_filename.aab" ]] && continue

			log "FILENAME:\t$filename..."
			log "ROMID:\t$romid"
			log "ROMNAME:\t$romname"
			log "CORE:\t$core"

			# Copy rom to build directory
			cp "$rom" "$ROM"

			compile

			# Copy output APKs
			for abi in "${ABIS[@]}"
			do
				cp "$APK_OUTPUT_DIR/app-$abi-release.apk" "$OUTPUT_DIR/$abi/$output_filename.apk"		
			done

			# Copy output aab
			cp "$AAB_OUTPUT_DIR/app-release.aab" "$OUTPUT_DIR/aab/$output_filename.aab"
		done
	done
}

prepare_env
build_inputs